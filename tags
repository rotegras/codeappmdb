!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$item	client/src/App.js	/^    let $item = $data.filter(dat => dat.id == $id);$/;"	r
$open	client/src/ListItems.js	/^    let $open = this.state.open || this.props.open === true ? 'open' : 'close';$/;"	r
$order	client/src/App.js	/^    let $order = $data.indexOf($item[0]);$/;"	r
.action-icon	client/src/app.css	/^.action-icon {$/;"	c
.action-icon__close	client/src/app.css	/^.action-icon__close {$/;"	c
.action-icon__open	client/src/app.css	/^.action-icon__open {$/;"	c
.app-title	client/src/app.css	/^.app-title {$/;"	c
.id	client/src/app.css	/^.id {$/;"	c
.item-title	client/src/app.css	/^.item-title {$/;"	c
.label	client/src/app.css	/^.label {$/;"	c
.line-break	client/src/app.css	/^.line-break {$/;"	c
.sidebar	client/src/app.css	/^.sidebar.sticky-top {$/;"	c
.sticky-2	client/src/app.css	/^.sticky-2 {$/;"	c
.sticky-4	client/src/app.css	/^.sticky-4 {$/;"	c
.sticky-6	client/src/app.css	/^.sticky-6 {$/;"	c
.tag	client/src/app.css	/^.tag {$/;"	c
.tagbutton	client/src/app.css	/^.tagbutton {$/;"	c
.taglist	client/src/app.css	/^.taglist {$/;"	c
ADD	client/src/App.orig.js	/^            ADD$/;"	r
DELETE	client/src/App.orig.js	/^            DELETE$/;"	r
DELETE	client/src/Delete.js	/^                DELETE$/;"	r
TagCallback	client/src/ListItems.js	/^  TagCallback = e => {$/;"	r
UPDATE	client/src/App.orig.js	/^            UPDATE$/;"	r
_refactored	client/src/App.js	/^      _refactored: true$/;"	r
active	client/src/work/App.js	/^                                    active={this.state.tagName}$/;"	r
addArticle	client/src/js/actions/index.js	/^export function addArticle(payload) {$/;"	r
addArticle	client/src/js/index.js	/^    window.addArticle = addArticle;$/;"	r
addComment	client/src/App.js	/^                  addComment={this.addComment}$/;"	r
addContent	client/src/App.js	/^                  addContent={this.addContent}$/;"	r
addLessLoader	client/config-overrides.js	/^  addLessLoader,$/;"	r
addTags	client/src/App.js	/^                  addTags={this.addTags}$/;"	r
addTitle	client/src/App.js	/^                  addTitle={this.addTitle}$/;"	r
arrayDuplicates	client/src/App.js	/^  arrayDuplicates = (array) => {$/;"	r
articles	client/src/js/reducers/index.js	/^    articles: []$/;"	r
attr	client/src/Create.js	/^                    attr="code"$/;"	r
attr	client/src/Create.js	/^                    attr="comment"$/;"	r
attr	client/src/Create.js	/^                    attr="tags"$/;"	r
attr	client/src/Create.js	/^                    attr="title"$/;"	r
body	client/src/app.css	/^body {$/;"	t
body	client/src/work/App.js	/^                        body={code.content.rendered} $/;"	r
border	client/src/ActionButton.js	/^    border: 0,$/;"	r
borderRadius	client/src/ActionButton.js	/^    borderRadius: 99,$/;"	r
button	client/src/app.css	/^button {$/;"	t
checkValidServiceWorker	client/src/serviceWorker.js	/^function checkValidServiceWorker(swUrl, config) {$/;"	r
checked	client/src/Controls.js	/^                        checked={open}$/;"	r
className	client/src/App.js	/^                  className="d-inline"$/;"	r
className	client/src/ListItems.js	/^                  className="action-icon ml-2"$/;"	r
className	client/src/ListItems.js	/^                  className="mr-2 action-icon ml-2"$/;"	r
className	client/src/ListItems.js	/^                  className={'action-icon__' + $open + ' mr-2'}$/;"	r
className	client/src/ListItems.js	/^                className="mb-3 item-title mr-auto"$/;"	r
clickCB	client/src/App.js	/^                  clickCB={this.toggleOpen}$/;"	r
clickTag	client/src/App.js	/^                      clickTag={this.updateActiveTag}$/;"	r
clickTag	client/src/App.js	/^                  clickTag={this.updateActiveTag}$/;"	r
clickTag	client/src/TagButton.js	/^const TagButton = ({ name, clickTag, id, active }) => {$/;"	r
clickTag	client/src/TagSelector.js	/^const TagSelector = ({name, clickTag, id, active }) => {$/;"	r
clickTag	client/src/work/App.js	/^                                    clickTag={this.updateActiveTag}$/;"	r
clickTag	client/src/work/FilteredTags.js	/^const FilteredTags = ({name, clickTag, id, active }) => {$/;"	r
clickTag	client/src/work/TagSelector.js	/^  clickTag: PropTypes.func.isRequired,$/;"	r
clickTag	client/src/work/TagSelector.js	/^const TagSelector = ({name, clickTag, id, active }) => {$/;"	r
code	backend/data.js	/^    code: String,$/;"	r
code	backend/server.js	/^  data.code = code;$/;"	r
code	client/src/App.js	/^                  code={this.state.new.code}$/;"	r
code	client/src/App.js	/^        code: "",$/;"	r
code	client/src/App.js	/^        code: '',$/;"	r
code	client/src/App.js	/^        code: false,$/;"	r
code	client/src/App.js	/^        code: this.state.codeupdate,$/;"	r
code	client/src/App.js	/^      code: "",$/;"	r
code	client/src/App.js	/^      code: code,$/;"	r
code	client/src/App.js	/^  putDataToDB = (title, code, comment, tags) => {$/;"	r
code	client/src/Create.js	/^            code: '',$/;"	r
code	client/src/Create.js	/^        const { title, code, tags, comment } = this.state;$/;"	r
code	client/src/Create.js	/^        onClickCreate(title, code, tags, comment);$/;"	r
code	client/src/work/App.js	/^                code: codedata.data$/;"	r
code	client/src/work/App.js	/^            code:[],$/;"	r
codeFiltered	client/src/App.js	/^    codeFiltered = [];$/;"	r
codeFiltered	client/src/App.js	/^let codeFiltered = [];$/;"	r
codeFiltered	client/src/work/App.js	/^        codeFiltered = [];$/;"	r
codeFiltered	client/src/work/App.js	/^let codeFiltered = [];$/;"	r
codeupdate	client/src/App.js	/^        codeupdate: "",$/;"	r
codeupdate	client/src/App.js	/^      codeupdate: "",$/;"	r
color	client/src/ActionButton.js	/^    color: 'white',$/;"	r
color	client/src/Create.js	/^                    color="secondary"$/;"	r
color	client/src/ListItems.js	/^                  color="primary"$/;"	r
color	client/src/ListItems.js	/^                  color="secondary"$/;"	r
color	client/src/Update.js	/^    color="primary"$/;"	r
comment	backend/data.js	/^    comment: String,$/;"	r
comment	backend/server.js	/^  data.comment = comment;$/;"	r
comment	client/src/App.js	/^                  comment={this.state.new.comment}$/;"	r
comment	client/src/App.js	/^        comment: "",$/;"	r
comment	client/src/App.js	/^        comment: ''$/;"	r
comment	client/src/App.js	/^        comment: '',$/;"	r
comment	client/src/App.js	/^        comment: this.state.commentupdate,$/;"	r
comment	client/src/App.js	/^      comment: "",$/;"	r
comment	client/src/App.js	/^      comment: comment,$/;"	r
comment	client/src/Create.js	/^            comment: ''$/;"	r
commentupdate	client/src/App.js	/^        commentupdate: "",$/;"	r
commentupdate	client/src/App.js	/^      commentupdate: "",$/;"	r
config	client/config-overrides.js	/^  config = rewireReactHotLoader(config, env);$/;"	r
content	client/src/App.js	/^        content: false$/;"	r
content	client/src/App.js	/^        content: this.state.codeupdate,$/;"	r
contentEditable	client/src/ListItems.js	/^    this.contentEditable = React.createRef();$/;"	r
control	client/src/Controls.js	/^                control={$/;"	r
createNew	client/src/App.js	/^  createNew = () => {$/;"	r
created	client/src/work/App.js	/^                        created={code.date}$/;"	r
currentIds	client/src/App.js	/^    let currentIds = this.state.data.map(data => data.id);$/;"	r
currentIds	client/src/App.orig.js	/^    let currentIds = this.state.data.map(data => data.id);$/;"	r
data	backend/server.js	/^    return res.json({ success: true, data: data });$/;"	r
data	backend/server.js	/^  let data = new Data();$/;"	r
data	client/src/App.js	/^                      data={dat}$/;"	r
data	client/src/App.js	/^                  data={this.state.data}$/;"	r
data	client/src/App.js	/^                  data={this.state.objectToUpdate}$/;"	r
data	client/src/App.js	/^            data: {$/;"	r
data	client/src/App.js	/^      data: [],$/;"	r
data	client/src/App.js	/^      data: update(this.state.data, { [$order]: { [name]: { $set: [value] } } })$/;"	r
data	client/src/App.orig.js	/^      data: {$/;"	r
data	client/src/App.orig.js	/^    data: [],$/;"	r
data	client/src/ListItems.js	/^      data: props.data,$/;"	r
data	client/src/Update.js	/^const Update = ({id, data, modifyField, modifyTags, onClickModify}) => {$/;"	r
dataById	client/src/App.js	/^    let dataById = this.state.data.filter(item => item.id == id);$/;"	r
db	backend/server.js	/^let db = mongoose.connection;$/;"	r
dbRoute	backend/server.js	/^  dbRoute,$/;"	r
deleteFromDB	client/src/App.js	/^  deleteFromDB = idTodelete => {$/;"	r
deleteFromDB	client/src/App.orig.js	/^  deleteFromDB = idTodelete => {$/;"	r
deleteThis	client/src/App.js	/^  deleteThis = iddelete => {$/;"	r
deleteThis	client/src/ListItems.js	/^  deleteThis = e => {$/;"	r
disabled	client/src/ListItems.js	/^                disabled={false}$/;"	r
display	client/src/ActionButton.js	/^    display: 'flex',$/;"	r
duplicates	client/src/App.js	/^    let duplicates = [];$/;"	r
err	backend/server.js	/^  Data.findOneAndDelete(id, err => {$/;"	r
err	backend/server.js	/^  Data.findOneAndUpdate(id, update, err => {$/;"	r
error	backend/server.js	/^      error: "INVALID INPUTS"$/;"	r
error	backend/server.js	/^    if (err) return res.json({ success: false, error: err });$/;"	r
exports	backend/data.js	/^module.exports = mongoose.model("Data", DataSchema);$/;"	r
exports	client/config-overrides.js	/^module.exports = fixBabelImports("import", {$/;"	r
exports	client/config-overrides.js	/^module.exports = override(config, env){$/;"	r
faTrash	client/src/ListItems.js	/^import { faEdit, faTrash, faCaretDown } from "@fortawesome\/free-solid-svg-icons"$/;"	r
fields	client/src/App.js	/^                  fields={this.state.new}$/;"	r
filtercode	client/src/App.js	/^  filtercode = (dataToFilter, fltr) => {$/;"	r
filtercode	client/src/work/App.js	/^        this.filtercode = this.filtercode.bind(this);$/;"	r
filtercode	client/src/work/App.js	/^    filtercode = (data, fltr) => {$/;"	r
filtered	client/src/App.js	/^    let filtered = [];$/;"	r
filteredTags	client/src/App.js	/^        filteredTags: filtered$/;"	r
filteredTags	client/src/App.js	/^      filteredTags: [],$/;"	r
filteredTags	client/src/work/App.js	/^            filteredTags: [] $/;"	r
filteredTags	client/src/work/App.js	/^            filteredTags: filter $/;"	r
filteredTags	client/src/work/App.js	/^            filteredTags:[]$/;"	r
filteredsingle	client/src/App.js	/^    let filteredsingle = [];$/;"	r
filtertagsonsearch	client/src/App.js	/^  filtertagsonsearch = (search) => {$/;"	r
filtertagsonsearch	client/src/work/App.js	/^        this.filtertagsonsearch = this.filtertagsonsearch.bind(this);$/;"	r
filtertagsonsearch	client/src/work/App.js	/^    filtertagsonsearch = ( search ) => {$/;"	r
fixBabelImports	client/config-overrides.js	/^  fixBabelImports,$/;"	r
getDataFromDb	client/src/App.js	/^  getDataFromDb = () => {$/;"	r
getDataFromDb	client/src/App.orig.js	/^  getDataFromDb = () => {$/;"	r
getNodes	client/src/work/App.js	/^        this.getNodes = this.getNodes.bind(this);$/;"	r
getTags	client/src/work/App.js	/^        this.getTags = this.getTags.bind(this);$/;"	r
handleChange	client/src/Create.js	/^        this.handleChange = this.handleChange.bind(this);$/;"	r
handleChange	client/src/ListItems.js	/^  handleChange = e => {$/;"	r
handleNew	client/src/App.js	/^                  handleNew={this.createNew}$/;"	r
handleNew	client/src/Create.js	/^\/\/ const Create = ({ fields, handleNew, title, code, comment, tags, addTitle, addContent, addComment, addTags, onClickCreate}) => {$/;"	r
height	client/src/ActionButton.js	/^    height: 24,$/;"	r
here	client/src/App.orig.js	/^  \/\/ just a note, here, in the front end, we use the id key of our data object $/;"	r
hostname	client/src/serviceWorker.js	/^    window.location.hostname === '[::1]' ||$/;"	r
hostname	client/src/serviceWorker.js	/^  window.location.hostname === 'localhost' ||$/;"	r
html	client/src/ListItems.js	/^                html={this.props.data.name}$/;"	r
html	client/src/ListItems.js	/^      html: props.data.name,$/;"	r
html	client/src/app.css	/^html {$/;"	t
iant	client/src/Create.js	/^                    variant="contained"$/;"	r
iant	client/src/ListItems.js	/^                  variant="round"$/;"	r
iant	client/src/Update.js	/^    variant="contained"$/;"	r
id	backend/data.js	/^    id: Number,$/;"	r
id	backend/server.js	/^  data.id = id;$/;"	r
id	client/src/App.js	/^                      id={dat.id}$/;"	r
id	client/src/App.js	/^                  id={this.state.idToUpdate}$/;"	r
id	client/src/App.js	/^              id: { _id: this.state.objectToDelete }$/;"	r
id	client/src/App.js	/^            id: { _id: dat._id },$/;"	r
id	client/src/App.js	/^        id: '',$/;"	r
id	client/src/App.js	/^        id: false,$/;"	r
id	client/src/App.js	/^      id: "",$/;"	r
id	client/src/App.js	/^      id: idToBeAdded,$/;"	r
id	client/src/App.orig.js	/^        id: objIdToDelete$/;"	r
id	client/src/App.orig.js	/^      id: idToBeAdded,$/;"	r
id	client/src/App.orig.js	/^      id: objIdToUpdate,$/;"	r
id	client/src/App.orig.js	/^    id: 0,$/;"	r
id	client/src/Delete.js	/^        let id = e.target.value;$/;"	r
id	client/src/ListItems.js	/^                  id={this.props.id}$/;"	r
id	client/src/ListItems.js	/^              id: {this.props.id}$/;"	r
id	client/src/Update.js	/^      id={id}$/;"	r
id	client/src/work/App.js	/^                                    id={tag.id}$/;"	r
id	client/src/work/App.js	/^                            id={this.state.tagId}$/;"	r
id	client/src/work/TagSelector.js	/^  id: PropTypes.number.isRequired,$/;"	r
idDelete	client/src/ListItems.js	/^    let idDelete = e.target.id;$/;"	r
idToBeAdded	client/src/App.js	/^    let idToBeAdded = 0;$/;"	r
idToBeAdded	client/src/App.orig.js	/^    let idToBeAdded = 0;$/;"	r
idToDelete	client/src/App.js	/^      idToDelete: "",$/;"	r
idToDelete	client/src/App.orig.js	/^    idToDelete: null,$/;"	r
idToUpdate	client/src/App.js	/^                      idToUpdate={this.updateId}$/;"	r
idToUpdate	client/src/App.js	/^          idToUpdate: dat._id$/;"	r
idToUpdate	client/src/App.js	/^      idToUpdate: "",$/;"	r
idToUpdate	client/src/App.js	/^      idToUpdate: id,$/;"	r
idToUpdate	client/src/App.orig.js	/^    idToUpdate: null,$/;"	r
idupdate	client/src/ListItems.js	/^    let idupdate = e.target.id;$/;"	r
index	backend/data.js	/^    tags: { type: [String], index: true } \/\/ field level$/;"	r
innerRef	client/src/ListItems.js	/^                innerRef={this.contentEditable}$/;"	r
input	client/src/App.js	/^                  input={this.state.searchById}$/;"	r
input	client/src/App.js	/^                  input={this.state.searchingTag}$/;"	r
input	client/src/IdSelector.js	/^const IdSelector = ({ keyDown, input, reset }) => {$/;"	r
input	client/src/SearchTag.js	/^const SearchTag = ({keyDown, input, reset}) => {$/;"	r
input	client/src/app.css	/^input {$/;"	t
input	client/src/work/App.js	/^                                 input={this.state.searchingTag}$/;"	r
input	client/src/work/SearchTag.js	/^const SearchTag = ({keyDown, input, reset}) => {$/;"	r
interval	client/src/App.js	/^      let interval = setInterval(this.getDataFromDb, 300);$/;"	r
interval	client/src/App.orig.js	/^      let interval = setInterval(this.getDataFromDb, 1000);$/;"	r
intervalIsSet	client/src/App.js	/^      intervalIsSet: false,$/;"	r
intervalIsSet	client/src/App.orig.js	/^    intervalIsSet: false,$/;"	r
itemToUpdate	client/src/App.js	/^    let itemToUpdate = this.state.data.filter(item => item.id == id);$/;"	r
javascriptEnabled	client/config-overrides.js	/^    javascriptEnabled: true,$/;"	r
key	client/src/App.js	/^                      key={dat.id}$/;"	r
key	client/src/work/App.js	/^                                    key={tag.index}$/;"	r
key	client/src/work/App.js	/^                            key={this.state.tagId.toString}$/;"	r
key	client/src/work/App.js	/^                        key={code.title.rendered} $/;"	r
keyDown	client/src/App.js	/^                  keyDown={this.searchById}$/;"	r
keyDown	client/src/App.js	/^                  keyDown={this.updatetag}$/;"	r
keyDown	client/src/SearchTag.js	/^  keyDown: PropTypes.func.isRequired,$/;"	r
keyDown	client/src/work/App.js	/^                                 keyDown={this.updatetag}$/;"	r
keyDown	client/src/work/SearchTag.js	/^  keyDown: PropTypes.func.isRequired,$/;"	r
label	client/src/Controls.js	/^                label="toggle"$/;"	r
lastel	client/src/LastEntry.js	/^        lastel = ordered.pop();$/;"	r
lastel	client/src/LastEntry.js	/^    let lastel=[];$/;"	r
libraryName	client/config-overrides.js	/^    libraryName: "antd", libraryDirectory: "es", style: true \/\/ change importing css to less$/;"	r
message	client/src/App.orig.js	/^      message: message$/;"	r
message	client/src/App.orig.js	/^    message: null,$/;"	r
modified	client/src/work/App.js	/^                        modified={code.modified}$/;"	r
modifyEntry	client/src/App.js	/^  modifyEntry = e => {$/;"	r
modifyField	client/src/App.js	/^                  modifyField={this.modifyField}$/;"	r
modifyField	client/src/App.js	/^  modifyField = (idn, name, value) => {$/;"	r
modifyTags	client/src/App.js	/^                  modifyTags={this.modifyTags}$/;"	r
modifyTags	client/src/App.js	/^  modifyTags = (value) => {$/;"	r
modifyValue	client/src/App.js	/^  modifyValue = (value, name) => {$/;"	r
modifyVars	client/config-overrides.js	/^    modifyVars: { "@primary-color": "#1DA57A" }$/;"	r
name	backend/data.js	/^    name: String,$/;"	r
name	backend/server.js	/^  const { id, name, code, comment, tags } = req.body;$/;"	r
name	backend/server.js	/^  data.name = name;$/;"	r
name	client/src/App.js	/^        name: this.state.titleupdate,$/;"	r
name	client/src/App.js	/^      name: title,$/;"	r
name	client/src/App.js	/^  modifyField = (idn, name, value) => {$/;"	r
name	client/src/Create.js	/^                    name="ADD ITEM"$/;"	r
name	client/src/ListItems.js	/^                name="title"$/;"	r
name	client/src/TagButton.js	/^            name={name}$/;"	r
name	client/src/Update.js	/^      name="code"$/;"	r
name	client/src/Update.js	/^      name="title"$/;"	r
name	client/src/Update.js	/^    modifyField({id}, name, value);$/;"	r
name	client/src/Update.js	/^    name="UPDATE"$/;"	r
name	client/src/Update.js	/^    name="comment"$/;"	r
name	client/src/work/App.js	/^                                    name={tag.name} $/;"	r
name	client/src/work/App.js	/^            let name = tagItem.name;$/;"	r
name	client/src/work/TagSelector.js	/^  name: PropTypes.string.isRequired,$/;"	r
new	client/src/App.js	/^      new: {$/;"	r
objIdToDelete	client/src/App.orig.js	/^        objIdToDelete = dat._id;$/;"	r
objIdToDelete	client/src/App.orig.js	/^    let objIdToDelete = null;$/;"	r
objIdToUpdate	client/src/App.orig.js	/^        objIdToUpdate = dat._id;$/;"	r
objIdToUpdate	client/src/App.orig.js	/^    let objIdToUpdate = null;$/;"	r
objectToDelete	client/src/App.js	/^          objectToDelete: dat._id$/;"	r
objectToDelete	client/src/App.js	/^      objectToDelete: "",$/;"	r
objectToUpdate	client/src/App.js	/^      objectToUpdate: "",$/;"	r
objectToUpdate	client/src/App.js	/^      objectToUpdate: itemToUpdate$/;"	r
objectToUpdate	client/src/App.js	/^      objectToUpdate: {$/;"	r
objectToUpdate	client/src/App.orig.js	/^    objectToUpdate: null$/;"	r
onChange	client/src/App.orig.js	/^            onChange={e => this.setState({ idToDelete: e.target.value })}$/;"	r
onChange	client/src/App.orig.js	/^            onChange={e => this.setState({ idToUpdate: e.target.value })}$/;"	r
onChange	client/src/App.orig.js	/^            onChange={e => this.setState({ message: e.target.value })}$/;"	r
onChange	client/src/App.orig.js	/^            onChange={e => this.setState({ updateToApply: e.target.value })}$/;"	r
onChange	client/src/Controls.js	/^                        onChange={e => handleClick(e)}$/;"	r
onChange	client/src/Create.js	/^                    onChange={e => this.handleChange(e)}$/;"	r
onChange	client/src/Delete.js	/^                onChange={e => updateId(e)}$/;"	r
onChange	client/src/ListItems.js	/^                onChange={this.handleChange}$/;"	r
onChange	client/src/Update.js	/^      onChange={e => modifyN(e)}$/;"	r
onChange	client/src/Update.js	/^    onChange={e => modifyN(e)}$/;"	r
onClick	client/src/App.orig.js	/^            onClick={() =>$/;"	r
onClick	client/src/Create.js	/^                    onClick={e => this.triggerAdd()}$/;"	r
onClick	client/src/ListItems.js	/^                  onClick={e => this.deleteThis(e)}$/;"	r
onClick	client/src/ListItems.js	/^                  onClick={e => this.toggleOpen(e)}$/;"	r
onClick	client/src/ListItems.js	/^                  onClick={e => this.updateId(e)}$/;"	r
onClick	client/src/Update.js	/^    onClick={e => modifyEntry(e)}$/;"	r
onClickCreate	client/src/App.js	/^                  onClickCreate={this.createNew}$/;"	r
onClickModify	client/src/App.js	/^                  onClickModify={this.modifyEntry}$/;"	r
onClickProp	client/src/App.js	/^                      onClickProp={this.deleteThis}$/;"	r
onInput	client/src/Create.js	/^                    onInput={e => this.handleChange(e)}$/;"	r
onstatechange	client/src/serviceWorker.js	/^        installingWorker.onstatechange = () => {$/;"	r
onupdatefound	client/src/serviceWorker.js	/^      registration.onupdatefound = () => {$/;"	r
open	client/src/App.js	/^                      open={this.state.open}$/;"	r
open	client/src/App.js	/^                  open={this.state.open}$/;"	r
open	client/src/App.js	/^      open: false,$/;"	r
open	client/src/ListItems.js	/^      open: props.open$/;"	r
ordered	client/src/LastEntry.js	/^    let ordered =  data.sort((a,b) => {$/;"	r
override	client/config-overrides.js	/^  override,$/;"	r
override	client/config-overrides.js	/^\/\/ module.exports = function override(config, env) {$/;"	r
placeholder	client/src/App.orig.js	/^            placeholder="add something in the database"$/;"	r
placeholder	client/src/App.orig.js	/^            placeholder="id of item to update here"$/;"	r
placeholder	client/src/App.orig.js	/^            placeholder="put id of item to delete here"$/;"	r
placeholder	client/src/App.orig.js	/^            placeholder="put new value of the item here"$/;"	r
placeholder	client/src/Create.js	/^                    placeholder="add comment"$/;"	r
placeholder	client/src/Create.js	/^                    placeholder="add content"$/;"	r
placeholder	client/src/Create.js	/^                    placeholder="add tags separated by comma"$/;"	r
placeholder	client/src/Create.js	/^                    placeholder="add title"$/;"	r
placeholder	client/src/Delete.js	/^                placeholder="put id of item to delete here"$/;"	r
placeholder	client/src/Update.js	/^      placeholder="modify content"$/;"	r
placeholder	client/src/Update.js	/^      placeholder="modify title"$/;"	r
placeholder	client/src/Update.js	/^    placeholder="modify cooment"$/;"	r
placeholder	client/src/Update.js	/^    placeholder="modify tags"$/;"	r
propTypes	client/src/SearchTag.js	/^SearchTag.propTypes = {$/;"	r
propTypes	client/src/work/SearchTag.js	/^SearchTag.propTypes = {$/;"	r
propTypes	client/src/work/TagSelector.js	/^TagSelector.propTypes = {$/;"	r
putDataToDB	client/src/App.js	/^  putDataToDB = (title, code, comment, tags) => {$/;"	r
putDataToDB	client/src/App.orig.js	/^  putDataToDB = message => {$/;"	r
register	client/src/serviceWorker.js	/^export function register(config) {$/;"	r
registerValidSW	client/src/serviceWorker.js	/^function registerValidSW(swUrl, config) {$/;"	r
reset	client/src/App.js	/^                  reset={this.resetInput}$/;"	r
reset	client/src/work/App.js	/^                                 reset={this.resetInput} $/;"	r
resetInput	client/src/App.js	/^  resetInput = () => {$/;"	r
resetInput	client/src/work/App.js	/^        this.resetInput = this.resetInput.bind(this);$/;"	r
resetInput	client/src/work/App.js	/^    resetInput = () => {$/;"	r
return	client/src/serviceWorker.js	/^          return;$/;"	r
return	client/src/serviceWorker.js	/^      return;$/;"	r
rootReducer	client/src/js/reducers/index.js	/^function rootReducer(state = initialState, action) {$/;"	r
row	client/src/Create.js	/^                    row="3"$/;"	r
searchById	client/src/App.js	/^      searchById: '',$/;"	r
searchById	client/src/App.js	/^      searchById: id$/;"	r
searchById	client/src/App.js	/^  searchById = (id) => {$/;"	r
searchingTag	client/src/App.js	/^      searchingTag: '',$/;"	r
searchingTag	client/src/App.js	/^      searchingTag: text$/;"	r
searchingTag	client/src/work/App.js	/^            searchingTag: '',$/;"	r
searchingTag	client/src/work/App.js	/^            searchingTag: text}, () => {$/;"	r
searchingTag	client/src/work/App.js	/^            searchingTag:'',$/;"	r
searchmode	client/src/App.js	/^      searchmode: {$/;"	r
serviceWorker	client/src/serviceWorker.js	/^  navigator.serviceWorker$/;"	r
singles	client/src/App.js	/^    let singles = [];$/;"	r
sortOrder	client/src/App.js	/^  sortOrder = (a, b) => {$/;"	r
state	client/src/App.js	/^    this.state = {$/;"	r
state	client/src/App.orig.js	/^  state = {$/;"	r
state	client/src/Create.js	/^        this.state = {$/;"	r
state	client/src/ListItems.js	/^    this.state = {$/;"	r
state	client/src/js/reducers/index.js	/^    return Object.assign({}, state, {$/;"	r
state	client/src/work/App.js	/^        this.state = {$/;"	r
status	client/src/serviceWorker.js	/^        response.status === 404 ||$/;"	r
store	client/src/js/index.js	/^    window.store = store;$/;"	r
style	client/config-overrides.js	/^    libraryName: "antd", libraryDirectory: "es", style: true \/\/ change importing css to less$/;"	r
style	client/src/App.orig.js	/^            style={{ width: "200px" }}$/;"	r
success	backend/server.js	/^      success: false,$/;"	r
t	client/src/App.js	/^          let t = {};$/;"	r
tagId	client/src/work/App.js	/^            tagId: parseInt(newTagId),$/;"	r
tagId	client/src/work/App.js	/^            tagId:'',$/;"	r
tagName	client/src/App.js	/^      tagName: "",$/;"	r
tagName	client/src/App.js	/^      tagName: '',$/;"	r
tagName	client/src/App.js	/^      tagName: newTagName$/;"	r
tagName	client/src/work/App.js	/^            tagName: newTagName,$/;"	r
tagName	client/src/work/App.js	/^            tagName:'',$/;"	r
tagadd	client/src/App.js	/^            let tagadd = filtered.filter(item => item.tag === tag);$/;"	r
tagnames	client/src/work/App.js	/^                        tagnames={this.state.tags}$/;"	r
tags	backend/data.js	/^    tags: { type: [String], index: true } \/\/ field level$/;"	r
tags	backend/server.js	/^  data.tags = tags;$/;"	r
tags	client/src/App.js	/^                      tags={dat.tags}$/;"	r
tags	client/src/App.js	/^                  tags={this.state.filteredTags}$/;"	r
tags	client/src/App.js	/^                  tags={this.state.new.tags}$/;"	r
tags	client/src/App.js	/^        tags: []$/;"	r
tags	client/src/App.js	/^        tags: [],$/;"	r
tags	client/src/App.js	/^        tags: this.state.tagsupdate,$/;"	r
tags	client/src/App.js	/^        tags: true,$/;"	r
tags	client/src/App.js	/^      tags: [],$/;"	r
tags	client/src/App.js	/^      tags: tags$/;"	r
tags	client/src/Create.js	/^            tags: '',$/;"	r
tags	client/src/work/App.js	/^                        tags={code.tags} $/;"	r
tags	client/src/work/App.js	/^                tags: codetags.data$/;"	r
tags	client/src/work/App.js	/^            tags:[],$/;"	r
tagsList	client/src/App.js	/^      tagsList: [],$/;"	r
tagsupdate	client/src/App.js	/^        tagsupdate: ""$/;"	r
tagsupdate	client/src/App.js	/^      tagsupdate: [],$/;"	r
tagsupdate	client/src/App.js	/^      tagsupdate: tagsArray$/;"	r
title	client/src/App.js	/^                  title={this.state.new.title}$/;"	r
title	client/src/App.js	/^                  title={this.state.tagName}$/;"	r
title	client/src/App.js	/^        title: "",$/;"	r
title	client/src/App.js	/^        title: '',$/;"	r
title	client/src/App.js	/^        title: 'Some title',$/;"	r
title	client/src/App.js	/^        title: false,$/;"	r
title	client/src/App.js	/^        title: this.state.titleupdate,$/;"	r
title	client/src/App.js	/^      title: "",$/;"	r
title	client/src/Create.js	/^            title: this.props.fields.title,$/;"	r
title	client/src/work/App.js	/^                            title={this.state.tagName}$/;"	r
title	client/src/work/App.js	/^                        title={code.title.rendered} $/;"	r
titleupdate	client/src/App.js	/^        titleupdate: "",$/;"	r
titleupdate	client/src/App.js	/^      titleupdate: "",$/;"	r
toggleOpen	client/src/App.js	/^  toggleOpen = () => {$/;"	r
toggleOpen	client/src/ListItems.js	/^  toggleOpen = e => {$/;"	r
triggerAdd	client/src/Create.js	/^        this.triggerAdd = this.triggerAdd.bind(this);$/;"	r
type	client/src/App.orig.js	/^            type="text"$/;"	r
type	client/src/Create.js	/^                    type="text"$/;"	r
type	client/src/Delete.js	/^                type="text"$/;"	r
type	client/src/Update.js	/^      type="text"$/;"	r
type	client/src/Update.js	/^    type="text"$/;"	r
ul	client/src/app.css	/^ul {$/;"	t
unregister	client/src/serviceWorker.js	/^export function unregister() {$/;"	r
update	backend/server.js	/^  Data.findOneAndUpdate(id, update, err => {$/;"	r
update	client/src/App.js	/^            update: {$/;"	r
update	client/src/App.js	/^      update: {$/;"	r
update	client/src/App.orig.js	/^      update: { message: updateToApply }$/;"	r
update	client/src/Update.js	/^    update$/;"	r
updateActiveTag	client/src/App.js	/^  updateActiveTag = (newTagName) => {$/;"	r
updateActiveTag	client/src/work/App.js	/^    updateActiveTag = ( newTagName, newTagId ) => {$/;"	r
updateDB	client/src/App.js	/^  updateDB = (idToUpdate, update) => {$/;"	r
updateDB	client/src/App.orig.js	/^  updateDB = (idToUpdate, updateToApply) => {$/;"	r
updateId	client/src/App.js	/^  updateId = id => {$/;"	r
updateId	client/src/ListItems.js	/^  updateId = e => {$/;"	r
updateToApply	client/src/App.js	/^      updateToApply: value$/;"	r
updateToApply	client/src/App.js	/^      updateToApply: {$/;"	r
updateToApply	client/src/App.js	/^      updateToApply: {},$/;"	r
updateValue	client/src/App.js	/^  updateValue = value => {$/;"	r
updatetag	client/src/App.js	/^  updatetag = (text) => {$/;"	r
updatetag	client/src/work/App.js	/^        this.updatetag = this.updatetag.bind(this);$/;"	r
updatetag	client/src/work/App.js	/^    updatetag = ( text ) => {$/;"	r
value	client/src/Create.js	/^                    value={this.state.code}$/;"	r
value	client/src/Create.js	/^                    value={this.state.comment}$/;"	r
value	client/src/Create.js	/^                    value={this.state.tags}$/;"	r
value	client/src/Create.js	/^                    value={this.state.title}$/;"	r
value	client/src/IdSelector.js	/^        value = { input } className="mb-2 px-2 mr-2 pr-3" onChange={ ( e ) => sendId(e)} \/>$/;"	r
value	client/src/ListItems.js	/^                value={this.props.data.name}$/;"	r
value	client/src/Update.js	/^      value={data.code}$/;"	r
value	client/src/Update.js	/^      value={data.name}$/;"	r
value	client/src/Update.js	/^    let value = e.target.value;$/;"	r
value	client/src/Update.js	/^    value={data.comment}$/;"	r
value	client/src/Update.js	/^    value={data.tags}$/;"	r
width	client/src/ActionButton.js	/^    width: 36,$/;"	r
